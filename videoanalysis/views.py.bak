# -*- coding: utf-8 -*-
from django.shortcuts import render
import cv2
from datetime import datetime
from rest_framework.decorators import api_view, permission_classes
from rest_framework import permissions
from rest_framework.response import Response
from tvid.settings import STATIC_URL
print STATIC_URL

def getDirectoryContents(dPath):
    import os 
    lst = []
    for sChild in os.listdir(dPath):                
        sChildPath = os.path.join(dPath,sChild)
        if os.path.isdir(sChildPath):
            print_directory_contents(sChildPath)
        else:
            lst.append(sChildPath)
#             print(sChildPath)
    del lst[0]
    return lst

def getVideoFrames(ipath, vpath):
    print vpath
    vidcap = cv2.VideoCapture(vpath)
    success,image = vidcap.read()
    # print success, image
    seconds = 10
    fps = int(round(vidcap.get(cv2.CAP_PROP_FPS))) # Gets the frames per second
    multiplier = fps * seconds
    length = int(vidcap.get(cv2.CAP_PROP_FRAME_COUNT))
    print length
    print fps
    total_dr = length/fps
    print "Total Duration: "+str(total_dr)
    # print length/fps
    # print( fps )
    interval = 30
    count = 0
    success = True
    # print fps
    # print multiplier

#     while success:
#     #     print "in"
#     #     success,image = vidcap.read()
#     #     print('Read a new frame: ', success)
#     #     if count%interval==0:
#     #         cv2.imwrite("frames/frame%d.jpg" % count, image)     # save frame as JPEG file
#     #     count += 1
#         frameId = int(round(vidcap.get(1))) #current frame number, rounded b/c sometimes you get frame intervals which aren't integers...this adds a little imprecision but is likely good enough
#         success, image = vidcap.read()
# #         print frameId
#         if frameId % fps == 0:
#             cv2.imwrite(ipath+""+"/frame%d.jpg" % frameId, image)

    for i in range(total_dr):
        success, image = vidcap.read()
        cv2.imwrite(ipath+""+"/frame%d.jpg" % i, image)
    vidcap.release()    
    return total_dr


def getImageWithFaces(ipath, vpath):
    print ipath, vpath
    print "JJJJJJ"
    total_video_duration = "None"
    t1 = datetime.now()
    total_video_duration = getVideoFrames(ipath, vpath)
    print "total_video_duration"
    print total_video_duration
    t2 = datetime.now()
    print "step 1 completed in {} sec...".format(t2-t1)
    # imagePath = sys.argv[1]
    count=0
    t3 = datetime.now()
    lst = getDirectoryContents(ipath)
    print "step 2 completed in {} sec...".format(t3-t2)
    # print lst
    cascPath = STATIC_URL+'/xml/haarcascade_frontalface_default.xml'
    print "cascPath"
    print STATIC_URL
    print cascPath
    faceCascade = cv2.CascadeClassifier(cascPath)
    for path in lst:
    #     print path
        imagePath = path
        image = cv2.imread(imagePath)
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        faces = faceCascade.detectMultiScale(
            gray,
            scaleFactor=1.1,
            minNeighbors=5,
            minSize=(30, 30)
            #flags = cv2.CV_HAAR_SCALE_IMAGE
        )
    #     print faces
        if len(faces)!=0:
            count+=1
    t4 = datetime.now()
    print "step 2 completed in {} sec...".format(t4-t3)
    return [count, total_video_duration]


@api_view(["POST", "GET"])
@permission_classes((permissions.AllowAny,))
def videoAnalyze(request):
    try:
        # print request
        # print type(request)
        t1=datetime.now()
        # ipath = "/Users/gaurav/AnacondaProjects/FD/frames"
        # vpath = "/Users/gaurav/AnacondaProjects/FD/naja.mp4"
        # ipath = "/Users/gaurav/Documents/cc"
        # vpath = "/Users/gaurav/Documents/cc.mp4"
        ipath = request.data["ipath"]
        vpath = request.data["vpath"]
        print request.data['ipath']
        print request.data['vpath']
        data = getImageWithFaces(ipath, vpath)
        total_face_duration = data[0]
        total_video_duration = data[1]
        print "total duration of video: {} sec".format(total_video_duration)
        print "total duration with human: {} sec".format(total_face_duration)
        t2=datetime.now()
        print "Completed"
        print t2-t1

            # print("Found {0} faces!".format(len(faces)))
            # Draw a rectangle around the faces
            # for (x, y, w, h) in faces:
            #     cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 2)
            # cv2.imshow("Faces found", image)
            # cv2.waitKey(0)
        return Response({"data": "found"})
    except Exception as e:
        print e
        return Response({"data": "not found", "error": str(e)})
